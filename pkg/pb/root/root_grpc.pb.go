// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: root.proto

package root

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Commander_Load_FullMethodName = "/root.Commander/Load"
	Commander_Run_FullMethodName  = "/root.Commander/Run"
)

// CommanderClient is the client API for Commander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommanderClient interface {
	Load(ctx context.Context, in *Source, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileLoaded], error)
	Run(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Interrupt, Output], error)
}

type commanderClient struct {
	cc grpc.ClientConnInterface
}

func NewCommanderClient(cc grpc.ClientConnInterface) CommanderClient {
	return &commanderClient{cc}
}

func (c *commanderClient) Load(ctx context.Context, in *Source, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileLoaded], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Commander_ServiceDesc.Streams[0], Commander_Load_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Source, FileLoaded]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Commander_LoadClient = grpc.ServerStreamingClient[FileLoaded]

func (c *commanderClient) Run(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Interrupt, Output], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Commander_ServiceDesc.Streams[1], Commander_Run_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Interrupt, Output]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Commander_RunClient = grpc.BidiStreamingClient[Interrupt, Output]

// CommanderServer is the server API for Commander service.
// All implementations must embed UnimplementedCommanderServer
// for forward compatibility.
type CommanderServer interface {
	Load(*Source, grpc.ServerStreamingServer[FileLoaded]) error
	Run(grpc.BidiStreamingServer[Interrupt, Output]) error
	mustEmbedUnimplementedCommanderServer()
}

// UnimplementedCommanderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommanderServer struct{}

func (UnimplementedCommanderServer) Load(*Source, grpc.ServerStreamingServer[FileLoaded]) error {
	return status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedCommanderServer) Run(grpc.BidiStreamingServer[Interrupt, Output]) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedCommanderServer) mustEmbedUnimplementedCommanderServer() {}
func (UnimplementedCommanderServer) testEmbeddedByValue()                   {}

// UnsafeCommanderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommanderServer will
// result in compilation errors.
type UnsafeCommanderServer interface {
	mustEmbedUnimplementedCommanderServer()
}

func RegisterCommanderServer(s grpc.ServiceRegistrar, srv CommanderServer) {
	// If the following call pancis, it indicates UnimplementedCommanderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Commander_ServiceDesc, srv)
}

func _Commander_Load_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Source)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommanderServer).Load(m, &grpc.GenericServerStream[Source, FileLoaded]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Commander_LoadServer = grpc.ServerStreamingServer[FileLoaded]

func _Commander_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommanderServer).Run(&grpc.GenericServerStream[Interrupt, Output]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Commander_RunServer = grpc.BidiStreamingServer[Interrupt, Output]

// Commander_ServiceDesc is the grpc.ServiceDesc for Commander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "root.Commander",
	HandlerType: (*CommanderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Load",
			Handler:       _Commander_Load_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _Commander_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "root.proto",
}
